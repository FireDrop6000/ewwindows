#!/usr/bin/env python3

import os
import socket
import threading
import signal
import argparse
from gi.repository import GLib

open_timeouts = 0
lock = threading.Lock()
client = None
loop = None

runtime_dir = os.getenv("XDG_RUNTIME_DIR")
instance_signature = os.getenv("HYPRLAND_INSTANCE_SIGNATURE")

hypr_socket_path = f"{runtime_dir}/hypr/{instance_signature}/.socket.sock"
hypr_socket2_path = f"{runtime_dir}/hypr/{instance_signature}/.socket2.sock"

def hyprctl(command):
    try:
        with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as command_socket:
            command_socket.connect(hypr_socket_path)
            command_socket.sendall(command.encode())
    except Exception as e:
        print(f"Error connecting to {hypr_socket_path}: {e}")

def handle_timeout():
    global open_timeouts
    with lock:
        open_timeouts -= 1
        if open_timeouts == 0:
            hyprctl("/dispatch overview:close")
    return False

def listen():
    global open_timeouts, client
    try:
        client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        client.connect(hypr_socket2_path)
        print(f"Connected to {hypr_socket2_path}")
        
        while True:
            data = client.recv(1024)
            if not data:
                break
            
            for line in data.decode().split('\n'):
                if line.startswith("workspacev2"):
                    with lock:
                        if open_timeouts == 0:
                            hyprctl("/dispatch overview:open")
                        open_timeouts += 1
                    GLib.timeout_add(args.timeout, handle_timeout)
    except Exception as e:
        print(f"Error connecting to {hypr_socket2_path}: {e}")

def cleanup(signum, frame):
    global client, loop
    print("Shutting down...")
    if client:
        client.close()
    if loop:
        loop.quit()
    exit(0)

if __name__ == "__main__":
    if not runtime_dir or not instance_signature:
        print("Error: Environment variables not set correctly.")
        exit(1)

    parser = argparse.ArgumentParser("auto-hyprspace", description="Automatically trigger hyprspace overview when switching workspaces")
    parser.add_argument("-t", "--timeout", type=int, default=1000, help="timeout duration in milliseconds (default: 1000)")
    args = parser.parse_args()

    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)
    
    listen_thread = threading.Thread(target=listen, daemon=True)
    listen_thread.start()
    
    loop = GLib.MainLoop()
    loop.run()
